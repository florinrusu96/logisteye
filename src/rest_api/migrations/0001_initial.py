# Generated by Django 3.1.3 on 2020-11-06 22:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import rest_api.managers.user_manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('free_user', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', rest_api.managers.user_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=140)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('width', models.FloatField(help_text='centimeters')),
                ('height', models.FloatField(help_text='centimeters')),
                ('depth', models.FloatField(help_text='centimeters')),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_delivered', models.BooleanField()),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.company')),
                ('current_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_location_location', to='rest_api.location')),
                ('destination_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='destination_location_location', to='rest_api.location')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.location')),
            ],
        ),
        migrations.CreateModel(
            name='Locker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(default=1)),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='rest_api.location')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='rest_api.company')),
            ],
        ),
        migrations.CreateModel(
            name='CourierToPackage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('drop_off_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drop_off_location_location', to='rest_api.location')),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.package')),
                ('pickup_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.location')),
            ],
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_empty', models.BooleanField(default=True)),
                ('locker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.locker')),
                ('size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.size')),
            ],
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('radius', models.FloatField()),
                ('location_center', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='rest_api.location')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='assigned_area',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='rest_api.area'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
